{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar isStructConstructorLike = require( '@stdlib/assert-is-struct-constructor-like' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isDataTypeString = require( '@stdlib/ndarray-base-assert-is-data-type-string' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar hasProp = require( '@stdlib/assert-has-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar resolveEnum = require( '@stdlib/ndarray-base-dtype-resolve-enum' );\nvar dtype2desc = require( '@stdlib/ndarray-base-dtype-desc' );\nvar dtype2char = require( '@stdlib/ndarray-base-dtype-char' );\nvar dtype2alignment = require( '@stdlib/ndarray-base-dtype-alignment' );\nvar bytesPerElement = require( '@stdlib/ndarray-base-bytes-per-element' );\nvar dtypes = require( '@stdlib/ndarray-dtypes' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if a value is a `DataType`.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a `DataType`\n*/\nfunction isDataType( value ) {\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\tvalue.constructor.name === 'DataType' &&\n\t\tisString( value.char ) &&\n\t\tisString( value.description ) &&\n\t\tisString( value.byteOrder ) &&\n\t\thasProp( value, 'value' )\n\t);\n}\n\n\n// MAIN //\n\n/**\n* Data type constructor.\n*\n* @constructor\n* @param {*} value - data type value\n* @param {Options} [options] - constructor options\n* @param {string} [options.description] - data type description\n* @throws {TypeError} first argument must be a supported data type value\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {DataType} data type instance\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var str = dt.toString();\n* // returns 'float64'\n*/\nfunction DataType( value, options ) {\n\tvar nargs;\n\tvar type;\n\tvar opts;\n\n\tnargs = arguments.length;\n\tif ( !( this instanceof DataType ) ) {\n\t\tif ( nargs < 2 ) {\n\t\t\treturn new DataType( value );\n\t\t}\n\t\treturn new DataType( value, options );\n\t}\n\tif ( isDataTypeString( value ) ) {\n\t\ttype = 'builtin';\n\t} else if ( isStructConstructorLike( value ) ) {\n\t\ttype = 'struct';\n\t} else if ( isDataType( value ) ) {\n\t\t// Clone the input data type:\n\t\treturn new DataType( value.value, {\n\t\t\t'description': value.description\n\t\t});\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a supported data type string, a struct constructor, or another data type instance. Value: `%s`.', value ) );\n\t}\n\tif ( nargs > 1 ) {\n\t\topts = options;\n\t\tif ( !isPlainObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'description' ) && !isString( opts.description ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'description', opts.description ) );\n\t\t}\n\t} else {\n\t\topts = {};\n\t}\n\tthis._value = value;\n\tthis._description = opts.description || ( dtype2desc( value ) || '' );\n\tthis._char = dtype2char( value ) || '';\n\tthis._enum = resolveEnum( value ) || dtypes.userdefined_type;\n\tthis._alignment = dtype2alignment( value ) || -1;\n\tthis._byteLength = bytesPerElement( value ) || -1;\n\tthis._byteOrder = 'host'; // TODO: consider supporting little-endian and big-endian byte orders\n\tthis._type = type;\n\treturn this;\n}\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof DataType\n* @type {string}\n* @default 'DataType'\n*\n* @example\n* var v = DataType.name;\n* // returns 'DataType'\n*/\nsetReadOnly( DataType, 'name', 'DataType' );\n\n/**\n* Alignment (in bytes) for the data type.\n*\n* ## Notes\n*\n* -   If a data type does not have a known alignment, the returned value is `-1`.\n*\n* @name alignment\n* @memberof DataType.prototype\n* @readonly\n* @type {integer}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.alignment;\n* // returns 8\n*/\nsetReadOnlyAccessor( DataType.prototype, 'alignment', function get() {\n\treturn this._alignment;\n});\n\n/**\n* Size (in bytes) of the data type.\n*\n* ## Notes\n*\n* -   If a data type does not have a known size, the returned value is `-1`.\n*\n* @name byteLength\n* @memberof DataType.prototype\n* @readonly\n* @type {integer}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.byteLength;\n* // returns 8\n*/\nsetReadOnlyAccessor( DataType.prototype, 'byteLength', function get() {\n\treturn this._byteLength;\n});\n\n/**\n* Data type byte order.\n*\n* ## Notes\n*\n* -   Potential values:\n*\n*     -   **host**: host platform byte order.\n*     -   **little-endian**: little-endian byte order.\n*     -   **big-endian**: big-endian byte order.\n*\n* @name byteOrder\n* @memberof DataType.prototype\n* @readonly\n* @type {string}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.byteOrder;\n* // returns 'host'\n*/\nsetReadOnlyAccessor( DataType.prototype, 'byteOrder', function get() {\n\treturn this._byteOrder;\n});\n\n/**\n* Single letter character abbreviation for the data type.\n*\n* ## Notes\n*\n* -   If a data type does not have a corresponding single letter character abbreviation, the returned value is an empty string.\n*\n* @name char\n* @memberof DataType.prototype\n* @readonly\n* @type {string}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.char;\n* // returns 'd'\n*/\nsetReadOnlyAccessor( DataType.prototype, 'char', function get() {\n\treturn this._char;\n});\n\n/**\n* Data type description.\n*\n* ## Notes\n*\n* -   If a data type does not have an associated description, the returned value is an empty string.\n*\n* @name description\n* @memberof DataType.prototype\n* @readonly\n* @type {string}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.description;\n* // returns <string>\n*/\nsetReadOnlyAccessor( DataType.prototype, 'description', function get() {\n\treturn this._description;\n});\n\n/**\n* Enumeration constant for the data type.\n*\n* ## Notes\n*\n* -   If a data type does not have a corresponding known enumeration constant, the returned value is the enumeration constant for a user-defined data type.\n*\n* @name enum\n* @memberof DataType.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.enum;\n* // returns <number>\n*/\nsetReadOnlyAccessor( DataType.prototype, 'enum', function get() {\n\treturn this._enum;\n});\n\n/**\n* Raw (original) data type value.\n*\n* @name value\n* @memberof DataType.prototype\n* @readonly\n* @type {*}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.value;\n* // returns 'float64'\n*/\nsetReadOnlyAccessor( DataType.prototype, 'value', function get() {\n\treturn this._value;\n});\n\n/**\n* Serializes a data type instance as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `DataType` instance.\n*\n* @name toJSON\n* @memberof DataType.prototype\n* @type {Function}\n* @returns {Object} serialized instance\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var o = dt.toJSON();\n* // returns {...}\n*/\nsetReadOnly( DataType.prototype, 'toJSON', function toJSON() {\n\treturn {\n\t\t'type': 'DataType',\n\t\t'value': this.toString(),\n\t\t'byteOrder': this._byteOrder,\n\t\t'description': this._description\n\t};\n});\n\n/**\n* Serializes a data type instance to a string.\n*\n* @name toString\n* @memberof DataType.prototype\n* @type {Function}\n* @returns {string} serialized string\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.toString();\n* // returns 'float64'\n*/\nsetReadOnly( DataType.prototype, 'toString', function toString() {\n\treturn ( this._type === 'struct' ) ? this._value.layout : String( this._value );\n});\n\n/**\n* Converts a data type instance to a primitive value.\n*\n* @name valueOf\n* @memberof DataType.prototype\n* @type {Function}\n* @returns {string} primitive value\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.valueOf();\n* // returns 'float64'\n*/\nsetReadOnly( DataType.prototype, 'valueOf', function valueOf() {\n\treturn this.toString();\n});\n\n\n// EXPORTS //\n\nmodule.exports = DataType;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Data type constructor.\n*\n* @module @stdlib/ndarray-dtype-ctor\n*\n* @example\n* var DataType = require( '@stdlib/ndarray-dtype-ctor' );\n*\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var str = dt.toString();\n* // returns 'float64'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isStructConstructorLike", "isPlainObject", "isString", "isDataTypeString", "hasOwnProp", "hasProp", "setReadOnlyAccessor", "setReadOnly", "resolveEnum", "dtype2desc", "dtype2char", "dtype2alignment", "bytesPerElement", "dtypes", "format", "isDataType", "value", "DataType", "options", "nargs", "type", "opts", "main"]
}
