{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport isStructConstructorLike from '@stdlib/assert-is-struct-constructor-like';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isDataTypeString from '@stdlib/ndarray-base-assert-is-data-type-string';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport hasProp from '@stdlib/assert-has-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport resolveEnum from '@stdlib/ndarray-base-dtype-resolve-enum';\nimport dtype2desc from '@stdlib/ndarray-base-dtype-desc';\nimport dtype2char from '@stdlib/ndarray-base-dtype-char';\nimport dtype2alignment from '@stdlib/ndarray-base-dtype-alignment';\nimport bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\nimport dtypes from '@stdlib/ndarray-dtypes';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if a value is a `DataType`.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a `DataType`\n*/\nfunction isDataType( value ) {\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\tvalue.constructor.name === 'DataType' &&\n\t\tisString( value.char ) &&\n\t\tisString( value.description ) &&\n\t\tisString( value.byteOrder ) &&\n\t\thasProp( value, 'value' )\n\t);\n}\n\n\n// MAIN //\n\n/**\n* Data type constructor.\n*\n* @constructor\n* @param {*} value - data type value\n* @param {Options} [options] - constructor options\n* @param {string} [options.description] - data type description\n* @throws {TypeError} first argument must be a supported data type value\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {DataType} data type instance\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var str = dt.toString();\n* // returns 'float64'\n*/\nfunction DataType( value, options ) {\n\tvar nargs;\n\tvar type;\n\tvar opts;\n\n\tnargs = arguments.length;\n\tif ( !( this instanceof DataType ) ) {\n\t\tif ( nargs < 2 ) {\n\t\t\treturn new DataType( value );\n\t\t}\n\t\treturn new DataType( value, options );\n\t}\n\tif ( isDataTypeString( value ) ) {\n\t\ttype = 'builtin';\n\t} else if ( isStructConstructorLike( value ) ) {\n\t\ttype = 'struct';\n\t} else if ( isDataType( value ) ) {\n\t\t// Clone the input data type:\n\t\treturn new DataType( value.value, {\n\t\t\t'description': value.description\n\t\t});\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a supported data type string, a struct constructor, or another data type instance. Value: `%s`.', value ) );\n\t}\n\tif ( nargs > 1 ) {\n\t\topts = options;\n\t\tif ( !isPlainObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'null2V', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'description' ) && !isString( opts.description ) ) {\n\t\t\tthrow new TypeError( format( 'null2W', 'description', opts.description ) );\n\t\t}\n\t} else {\n\t\topts = {};\n\t}\n\tthis._value = value;\n\tthis._description = opts.description || ( dtype2desc( value ) || '' );\n\tthis._char = dtype2char( value ) || '';\n\tthis._enum = resolveEnum( value ) || dtypes.userdefined_type;\n\tthis._alignment = dtype2alignment( value ) || -1;\n\tthis._byteLength = bytesPerElement( value ) || -1;\n\tthis._byteOrder = 'host'; // TODO: consider supporting little-endian and big-endian byte orders\n\tthis._type = type;\n\treturn this;\n}\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof DataType\n* @type {string}\n* @default 'DataType'\n*\n* @example\n* var v = DataType.name;\n* // returns 'DataType'\n*/\nsetReadOnly( DataType, 'name', 'DataType' );\n\n/**\n* Alignment (in bytes) for the data type.\n*\n* ## Notes\n*\n* -   If a data type does not have a known alignment, the returned value is `-1`.\n*\n* @name alignment\n* @memberof DataType.prototype\n* @readonly\n* @type {integer}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.alignment;\n* // returns 8\n*/\nsetReadOnlyAccessor( DataType.prototype, 'alignment', function get() {\n\treturn this._alignment;\n});\n\n/**\n* Size (in bytes) of the data type.\n*\n* ## Notes\n*\n* -   If a data type does not have a known size, the returned value is `-1`.\n*\n* @name byteLength\n* @memberof DataType.prototype\n* @readonly\n* @type {integer}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.byteLength;\n* // returns 8\n*/\nsetReadOnlyAccessor( DataType.prototype, 'byteLength', function get() {\n\treturn this._byteLength;\n});\n\n/**\n* Data type byte order.\n*\n* ## Notes\n*\n* -   Potential values:\n*\n*     -   **host**: host platform byte order.\n*     -   **little-endian**: little-endian byte order.\n*     -   **big-endian**: big-endian byte order.\n*\n* @name byteOrder\n* @memberof DataType.prototype\n* @readonly\n* @type {string}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.byteOrder;\n* // returns 'host'\n*/\nsetReadOnlyAccessor( DataType.prototype, 'byteOrder', function get() {\n\treturn this._byteOrder;\n});\n\n/**\n* Single letter character abbreviation for the data type.\n*\n* ## Notes\n*\n* -   If a data type does not have a corresponding single letter character abbreviation, the returned value is an empty string.\n*\n* @name char\n* @memberof DataType.prototype\n* @readonly\n* @type {string}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.char;\n* // returns 'd'\n*/\nsetReadOnlyAccessor( DataType.prototype, 'char', function get() {\n\treturn this._char;\n});\n\n/**\n* Data type description.\n*\n* ## Notes\n*\n* -   If a data type does not have an associated description, the returned value is an empty string.\n*\n* @name description\n* @memberof DataType.prototype\n* @readonly\n* @type {string}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.description;\n* // returns <string>\n*/\nsetReadOnlyAccessor( DataType.prototype, 'description', function get() {\n\treturn this._description;\n});\n\n/**\n* Enumeration constant for the data type.\n*\n* ## Notes\n*\n* -   If a data type does not have a corresponding known enumeration constant, the returned value is the enumeration constant for a user-defined data type.\n*\n* @name enum\n* @memberof DataType.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.enum;\n* // returns <number>\n*/\nsetReadOnlyAccessor( DataType.prototype, 'enum', function get() {\n\treturn this._enum;\n});\n\n/**\n* Raw (original) data type value.\n*\n* @name value\n* @memberof DataType.prototype\n* @readonly\n* @type {*}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.value;\n* // returns 'float64'\n*/\nsetReadOnlyAccessor( DataType.prototype, 'value', function get() {\n\treturn this._value;\n});\n\n/**\n* Serializes a data type instance as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `DataType` instance.\n*\n* @name toJSON\n* @memberof DataType.prototype\n* @type {Function}\n* @returns {Object} serialized instance\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var o = dt.toJSON();\n* // returns {...}\n*/\nsetReadOnly( DataType.prototype, 'toJSON', function toJSON() {\n\treturn {\n\t\t'type': 'DataType',\n\t\t'value': this.toString(),\n\t\t'byteOrder': this._byteOrder,\n\t\t'description': this._description\n\t};\n});\n\n/**\n* Serializes a data type instance to a string.\n*\n* @name toString\n* @memberof DataType.prototype\n* @type {Function}\n* @returns {string} serialized string\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.toString();\n* // returns 'float64'\n*/\nsetReadOnly( DataType.prototype, 'toString', function toString() {\n\treturn ( this._type === 'struct' ) ? this._value.layout : String( this._value );\n});\n\n/**\n* Converts a data type instance to a primitive value.\n*\n* @name valueOf\n* @memberof DataType.prototype\n* @type {Function}\n* @returns {string} primitive value\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.valueOf();\n* // returns 'float64'\n*/\nsetReadOnly( DataType.prototype, 'valueOf', function valueOf() {\n\treturn this.toString();\n});\n\n\n// EXPORTS //\n\nexport default DataType;\n"],"names":["DataType","value","options","nargs","type","opts","arguments","length","this","isDataTypeString","isStructConstructorLike","constructor","name","isString","char","description","byteOrder","hasProp","isDataType","TypeError","format","isPlainObject","hasOwnProp","_value","_description","dtype2desc","_char","dtype2char","_enum","resolveEnum","dtypes","userdefined_type","_alignment","dtype2alignment","_byteLength","bytesPerElement","_byteOrder","_type","setReadOnly","setReadOnlyAccessor","prototype","toString","layout","String"],"mappings":";;4/CAoFA,SAASA,EAAUC,EAAOC,GACzB,IAAIC,EACAC,EACAC,EAGJ,GADAF,EAAQG,UAAUC,SACVC,gBAAgBR,GACvB,OAAKG,EAAQ,EACL,IAAIH,EAAUC,GAEf,IAAID,EAAUC,EAAOC,GAE7B,GAAKO,EAAkBR,GACtBG,EAAO,cACD,KAAKM,EAAyBT,GAE9B,IAlDR,SAAqBA,GACpB,MACkB,iBAAVA,GACG,OAAVA,GAC2B,aAA3BA,EAAMU,YAAYC,MAClBC,EAAUZ,EAAMa,OAChBD,EAAUZ,EAAMc,cAChBF,EAAUZ,EAAMe,YAChBC,EAAShB,EAAO,QAElB,CAwCaiB,CAAYjB,GAEvB,OAAO,IAAID,EAAUC,EAAMA,MAAO,CACjCc,YAAed,EAAMc,cAGtB,MAAM,IAAII,UAAWC,EAAQ,kJAAmJnB,GAChL,CARAG,EAAO,QAQP,CACD,GAAKD,EAAQ,EAAI,CAEhB,IAAMkB,EADNhB,EAAOH,GAEN,MAAM,IAAIiB,UAAWC,EAAQ,SAAUf,IAExC,GAAKiB,EAAYjB,EAAM,iBAAoBQ,EAAUR,EAAKU,aACzD,MAAM,IAAII,UAAWC,EAAQ,SAAU,cAAef,EAAKU,aAE9D,MACEV,EAAO,CAAA,EAUR,OARAG,KAAKe,OAAStB,EACdO,KAAKgB,aAAenB,EAAKU,aAAiBU,EAAYxB,IAAW,GACjEO,KAAKkB,MAAQC,EAAY1B,IAAW,GACpCO,KAAKoB,MAAQC,EAAa5B,IAAW6B,EAAOC,iBAC5CvB,KAAKwB,WAAaC,EAAiBhC,KAAY,EAC/CO,KAAK0B,YAAcC,EAAiBlC,KAAY,EAChDO,KAAK4B,WAAa,OAClB5B,KAAK6B,MAAQjC,EACNI,IACR,CAcA8B,EAAatC,EAAU,OAAQ,YAqB/BuC,EAAqBvC,EAASwC,UAAW,aAAa,WACrD,OAAOhC,KAAKwB,UACb,IAqBAO,EAAqBvC,EAASwC,UAAW,cAAc,WACtD,OAAOhC,KAAK0B,WACb,IAyBAK,EAAqBvC,EAASwC,UAAW,aAAa,WACrD,OAAOhC,KAAK4B,UACb,IAqBAG,EAAqBvC,EAASwC,UAAW,QAAQ,WAChD,OAAOhC,KAAKkB,KACb,IAqBAa,EAAqBvC,EAASwC,UAAW,eAAe,WACvD,OAAOhC,KAAKgB,YACb,IAqBAe,EAAqBvC,EAASwC,UAAW,QAAQ,WAChD,OAAOhC,KAAKoB,KACb,IAiBAW,EAAqBvC,EAASwC,UAAW,SAAS,WACjD,OAAOhC,KAAKe,MACb,IAqBAe,EAAatC,EAASwC,UAAW,UAAU,WAC1C,MAAO,CACNpC,KAAQ,WACRH,MAASO,KAAKiC,WACdzB,UAAaR,KAAK4B,WAClBrB,YAAeP,KAAKgB,aAEtB,IAiBAc,EAAatC,EAASwC,UAAW,YAAY,WAC5C,MAAwB,WAAfhC,KAAK6B,MAAuB7B,KAAKe,OAAOmB,OAASC,OAAQnC,KAAKe,OACxE,IAiBAe,EAAatC,EAASwC,UAAW,WAAW,WAC3C,OAAOhC,KAAKiC,UACb"}