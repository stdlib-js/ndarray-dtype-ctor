{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport isStructConstructorLike from '@stdlib/assert-is-struct-constructor-like';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isDataTypeString from '@stdlib/ndarray-base-assert-is-data-type-string';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport hasProp from '@stdlib/assert-has-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport resolveEnum from '@stdlib/ndarray-base-dtype-resolve-enum';\nimport dtype2desc from '@stdlib/ndarray-base-dtype-desc';\nimport dtype2char from '@stdlib/ndarray-base-dtype-char';\nimport dtype2alignment from '@stdlib/ndarray-base-dtype-alignment';\nimport bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if a value is a `DataType`.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a `DataType`\n*/\nfunction isDataType( value ) {\n\treturn (\n\t\tvalue instanceof DataType ||\n\t\t(\n\t\t\ttypeof value === 'object' &&\n\t\t\tvalue !== null &&\n\t\t\tvalue.constructor.name === 'DataType' &&\n\t\t\tisString( value.char ) &&\n\t\t\tisString( value.description ) &&\n\t\t\tisString( value.byteOrder ) &&\n\t\t\thasProp( value, 'value' )\n\t\t)\n\t);\n}\n\n\n// MAIN //\n\n/**\n* Data type constructor.\n*\n* @constructor\n* @param {*} value - data type value\n* @param {Options} [options] - constructor options\n* @param {string} [options.description] - data type description\n* @throws {TypeError} first argument must be a supported data type value\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {DataType} data type instance\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var str = dt.toString();\n* // returns 'float64'\n*/\nfunction DataType( value, options ) {\n\tvar nargs;\n\tvar type;\n\tvar opts;\n\n\tnargs = arguments.length;\n\tif ( !( this instanceof DataType ) ) {\n\t\tif ( nargs < 2 ) {\n\t\t\treturn new DataType( value );\n\t\t}\n\t\treturn new DataType( value, options );\n\t}\n\tif ( isDataTypeString( value ) ) {\n\t\ttype = 'builtin';\n\t} else if ( isDataType( value ) ) {\n\t\t// Clone the input data type:\n\t\treturn new DataType( value.value, {\n\t\t\t'description': value.description\n\t\t});\n\t} else if ( isStructConstructorLike( value ) ) {\n\t\ttype = 'struct';\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a supported data type string, a struct constructor, or another data type instance. Value: `%s`.', value ) );\n\t}\n\tif ( nargs > 1 ) {\n\t\topts = options;\n\t\tif ( !isPlainObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'null2V', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'description' ) && !isString( opts.description ) ) {\n\t\t\tthrow new TypeError( format( 'null2W', 'description', opts.description ) );\n\t\t}\n\t} else {\n\t\topts = {};\n\t}\n\tsetReadOnly( this, '_value', value );\n\tsetReadOnly( this, '_description', opts.description || ( dtype2desc( value ) || '' ) );\n\tsetReadOnly( this, '_char', dtype2char( value ) || '' );\n\tsetReadOnly( this, '_enum', resolveEnum( value ) || -1 );\n\tsetReadOnly( this, '_alignment', dtype2alignment( value ) || -1 );\n\tsetReadOnly( this, '_byteLength', bytesPerElement( value ) || -1 );\n\tsetReadOnly( this, '_byteOrder', 'host' ); // TODO: consider supporting little-endian and big-endian byte orders\n\tsetReadOnly( this, '_type', type );\n\treturn this;\n}\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof DataType\n* @type {string}\n* @default 'DataType'\n*\n* @example\n* var v = DataType.name;\n* // returns 'DataType'\n*/\nsetReadOnly( DataType, 'name', 'DataType' );\n\n/**\n* Alignment (in bytes) for the data type.\n*\n* ## Notes\n*\n* -   If a data type does not have a known alignment, the returned value is `-1`.\n*\n* @name alignment\n* @memberof DataType.prototype\n* @readonly\n* @type {integer}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.alignment;\n* // returns 8\n*/\nsetReadOnlyAccessor( DataType.prototype, 'alignment', function get() {\n\treturn this._alignment;\n});\n\n/**\n* Size (in bytes) of the data type.\n*\n* ## Notes\n*\n* -   If a data type does not have a known size, the returned value is `-1`.\n*\n* @name byteLength\n* @memberof DataType.prototype\n* @readonly\n* @type {integer}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.byteLength;\n* // returns 8\n*/\nsetReadOnlyAccessor( DataType.prototype, 'byteLength', function get() {\n\treturn this._byteLength;\n});\n\n/**\n* Data type byte order.\n*\n* ## Notes\n*\n* -   Potential values:\n*\n*     -   **host**: host platform byte order.\n*     -   **little-endian**: little-endian byte order.\n*     -   **big-endian**: big-endian byte order.\n*\n* @name byteOrder\n* @memberof DataType.prototype\n* @readonly\n* @type {string}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.byteOrder;\n* // returns 'host'\n*/\nsetReadOnlyAccessor( DataType.prototype, 'byteOrder', function get() {\n\treturn this._byteOrder;\n});\n\n/**\n* Single letter character abbreviation for the data type.\n*\n* ## Notes\n*\n* -   If a data type does not have a corresponding single letter character abbreviation, the returned value is an empty string.\n*\n* @name char\n* @memberof DataType.prototype\n* @readonly\n* @type {string}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.char;\n* // returns 'd'\n*/\nsetReadOnlyAccessor( DataType.prototype, 'char', function get() {\n\treturn this._char;\n});\n\n/**\n* Data type description.\n*\n* ## Notes\n*\n* -   If a data type does not have an associated description, the returned value is an empty string.\n*\n* @name description\n* @memberof DataType.prototype\n* @readonly\n* @type {string}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.description;\n* // returns <string>\n*/\nsetReadOnlyAccessor( DataType.prototype, 'description', function get() {\n\treturn this._description;\n});\n\n/**\n* Enumeration constant for the data type.\n*\n* ## Notes\n*\n* -   If a data type does not have a corresponding known enumeration constant, the returned value is `-1`.\n*\n* @name enum\n* @memberof DataType.prototype\n* @readonly\n* @type {integer}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.enum;\n* // returns <number>\n*/\nsetReadOnlyAccessor( DataType.prototype, 'enum', function get() {\n\treturn this._enum;\n});\n\n/**\n* Raw (original) data type value.\n*\n* @name value\n* @memberof DataType.prototype\n* @readonly\n* @type {*}\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.value;\n* // returns 'float64'\n*/\nsetReadOnlyAccessor( DataType.prototype, 'value', function get() {\n\treturn this._value;\n});\n\n/**\n* Serializes a data type instance as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `DataType` instance.\n*\n* @name toJSON\n* @memberof DataType.prototype\n* @type {Function}\n* @returns {Object} serialized instance\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var o = dt.toJSON();\n* // returns {...}\n*/\nsetReadOnly( DataType.prototype, 'toJSON', function toJSON() {\n\treturn {\n\t\t'type': 'DataType',\n\t\t'value': this.toString(),\n\t\t'byteOrder': this._byteOrder,\n\t\t'description': this._description\n\t};\n});\n\n/**\n* Serializes a data type instance to a string.\n*\n* @name toString\n* @memberof DataType.prototype\n* @type {Function}\n* @returns {string} serialized string\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.toString();\n* // returns 'float64'\n*/\nsetReadOnly( DataType.prototype, 'toString', function toString() {\n\treturn ( this._type === 'struct' ) ? this._value.layout : String( this._value );\n});\n\n/**\n* Converts a data type instance to a primitive value.\n*\n* @name valueOf\n* @memberof DataType.prototype\n* @type {Function}\n* @returns {string} primitive value\n*\n* @example\n* var dt = new DataType( 'float64' );\n* // returns <DataType>\n*\n* var v = dt.valueOf();\n* // returns 'float64'\n*/\nsetReadOnly( DataType.prototype, 'valueOf', function valueOf() {\n\treturn this.toString();\n});\n\n\n// EXPORTS //\n\nexport default DataType;\n"],"names":["DataType","value","options","nargs","type","opts","arguments","length","this","isDataTypeString","constructor","name","isString","char","description","byteOrder","hasProp","isDataType","isStructConstructorLike","TypeError","format","isPlainObject","hasOwnProp","setReadOnly","dtype2desc","dtype2char","resolveEnum","dtype2alignment","bytesPerElement","setReadOnlyAccessor","prototype","_alignment","_byteLength","_byteOrder","_char","_description","_enum","_value","toString","_type","layout","String"],"mappings":";;m6CAsFA,SAASA,EAAUC,EAAOC,GACzB,IAAIC,EACAC,EACAC,EAGJ,GADAF,EAAQG,UAAUC,SACVC,gBAAgBR,GACvB,OAAKG,EAAQ,EACL,IAAIH,EAAUC,GAEf,IAAID,EAAUC,EAAOC,GAE7B,GAAKO,EAAkBR,GACtBG,EAAO,cACD,IAnDR,SAAqBH,GACpB,OACCA,aAAiBD,GAEC,iBAAVC,GACG,OAAVA,GAC2B,aAA3BA,EAAMS,YAAYC,MAClBC,EAAUX,EAAMY,OAChBD,EAAUX,EAAMa,cAChBF,EAAUX,EAAMc,YAChBC,EAASf,EAAO,QAGnB,CAsCagB,CAAYhB,GAEvB,OAAO,IAAID,EAAUC,EAAMA,MAAO,CACjCa,YAAeb,EAAMa,cAEhB,IAAKI,EAAyBjB,GAGpC,MAAM,IAAIkB,UAAWC,EAAQ,kJAAmJnB,IAFhLG,EAAO,QAGP,CACD,GAAKD,EAAQ,EAAI,CAEhB,IAAMkB,EADNhB,EAAOH,GAEN,MAAM,IAAIiB,UAAWC,EAAQ,SAAUf,IAExC,GAAKiB,EAAYjB,EAAM,iBAAoBO,EAAUP,EAAKS,aACzD,MAAM,IAAIK,UAAWC,EAAQ,SAAU,cAAef,EAAKS,aAE9D,MACET,EAAO,CAAA,EAUR,OARAkB,EAAaf,KAAM,SAAUP,GAC7BsB,EAAaf,KAAM,eAAgBH,EAAKS,aAAiBU,EAAYvB,IAAW,IAChFsB,EAAaf,KAAM,QAASiB,EAAYxB,IAAW,IACnDsB,EAAaf,KAAM,QAASkB,EAAazB,KAAY,GACrDsB,EAAaf,KAAM,aAAcmB,EAAiB1B,KAAY,GAC9DsB,EAAaf,KAAM,cAAeoB,EAAiB3B,KAAY,GAC/DsB,EAAaf,KAAM,aAAc,QACjCe,EAAaf,KAAM,QAASJ,GACrBI,IACR,CAcAe,EAAavB,EAAU,OAAQ,YAqB/B6B,EAAqB7B,EAAS8B,UAAW,aAAa,WACrD,OAAOtB,KAAKuB,UACb,IAqBAF,EAAqB7B,EAAS8B,UAAW,cAAc,WACtD,OAAOtB,KAAKwB,WACb,IAyBAH,EAAqB7B,EAAS8B,UAAW,aAAa,WACrD,OAAOtB,KAAKyB,UACb,IAqBAJ,EAAqB7B,EAAS8B,UAAW,QAAQ,WAChD,OAAOtB,KAAK0B,KACb,IAqBAL,EAAqB7B,EAAS8B,UAAW,eAAe,WACvD,OAAOtB,KAAK2B,YACb,IAqBAN,EAAqB7B,EAAS8B,UAAW,QAAQ,WAChD,OAAOtB,KAAK4B,KACb,IAiBAP,EAAqB7B,EAAS8B,UAAW,SAAS,WACjD,OAAOtB,KAAK6B,MACb,IAqBAd,EAAavB,EAAS8B,UAAW,UAAU,WAC1C,MAAO,CACN1B,KAAQ,WACRH,MAASO,KAAK8B,WACdvB,UAAaP,KAAKyB,WAClBnB,YAAeN,KAAK2B,aAEtB,IAiBAZ,EAAavB,EAAS8B,UAAW,YAAY,WAC5C,MAAwB,WAAftB,KAAK+B,MAAuB/B,KAAK6B,OAAOG,OAASC,OAAQjC,KAAK6B,OACxE,IAiBAd,EAAavB,EAAS8B,UAAW,WAAW,WAC3C,OAAOtB,KAAK8B,UACb"}